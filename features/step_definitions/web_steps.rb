# TL;DR: YOU SHOULD DELETE THIS FILE
#
# This file was generated by Cucumber-Rails and is only here to get you a head start
# These step definitions are thin wrappers around the Capybara/Webrat API that lets you
# visit pages, interact with widgets and make assertions about page content.
#
# If you use these step definitions as basis for your features you will quickly end up
# with features that are:
#
# * Hard to maintain
# * Verbose to read
#
# A much better approach is to write your own higher level step definitions, following
# the advice in the following blog posts:
#
# * http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html
# * http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/
# * http://elabs.se/blog/15-you-re-cuking-it-wrong
#


require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "selectors"))
#require 'net/http'
#require 'webmock'
#require 'capybara-webkit'
require 'selenium-webdriver'

module WithinHelpers
  def with_scope(locator)
    locator ? within(*selector_for(locator)) { yield } : yield
  end
end
World(WithinHelpers)

# Single-line step scoper
When /^(.*) within (.*[^:])$/ do |step, parent|
  with_scope(parent) { When step }
end

# Multi-line step scoper
When /^(.*) within (.*[^:]):$/ do |step, parent, table_or_string|
  with_scope(parent) { When "#{step}:", table_or_string }
end

Given /^(?:|I )am on (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )go to (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )press "([^"]*)"$/ do |button|
  click_button(button)
end

When /^(?:|I )follow "([^"]*)"$/ do |link|
  click_link(link)
end

When /^(?:|I )fill in "([^"]*)" with "([^"]*)"$/ do |field, value|
  fill_in(field, :with => value)
end

When /^(?:|I )fill in "([^"]*)" for "([^"]*)"$/ do |value, field|
  fill_in(field, :with => value)
end

# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select or option
# based on naming conventions.
#
When /^(?:|I )fill in the following:$/ do |fields|
  fields.rows_hash.each do |name, value|
    When %{I fill in "#{name}" with "#{value}"}
  end
end

When /^(?:|I )select "([^"]*)" from "([^"]*)"$/ do |value, field|
  select(value, :from => field)
end

When /^(?:|I )check "([^"]*)"$/ do |field|
  check(field)
end

When /^(?:|I )uncheck "([^"]*)"$/ do |field|
  uncheck(field)
end

When /^(?:|I )choose "([^"]*)"$/ do |field|
  choose(field)
end

When /^(?:|I )attach the file "([^"]*)" to "([^"]*)"$/ do |path, field|
  attach_file(field, File.expand_path(path))
end

Then /^(?:|I )should see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_content(text)
  else
    assert page.has_content?(text)
  end
end

Then /^(?:|I )should see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_xpath('//*', :text => regexp)
  else
    assert page.has_xpath?('//*', :text => regexp)
  end
end

Then /^(?:|I )should not see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_no_content(text)
  else
    assert page.has_no_content?(text)
  end
end

Then /^(?:|I )should not see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_no_xpath('//*', :text => regexp)
  else
    assert page.has_no_xpath?('//*', :text => regexp)
  end
end

Then /^the "([^"]*)" field(?: within (.*))? should contain "([^"]*)"$/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should
      field_value.should =~ /#{value}/
    else
      assert_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" field(?: within (.*))? should not contain "([^"]*)"$/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should_not
      field_value.should_not =~ /#{value}/
    else
      assert_no_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" field should have the error "([^"]*)"$/ do |field, error_message|
  element = find_field(field)
  classes = element.find(:xpath, '..')[:class].split(' ')

  form_for_input = element.find(:xpath, 'ancestor::form[1]')
  using_formtastic = form_for_input[:class].include?('formtastic')
  error_class = using_formtastic ? 'error' : 'field_with_errors'

  if classes.respond_to? :should
    classes.should include(error_class)
  else
    assert classes.include?(error_class)
  end

  if page.respond_to?(:should)
    if using_formtastic
      error_paragraph = element.find(:xpath, '../*[@class="inline-errors"][1]')
      error_paragraph.should have_content(error_message)
    else
      page.should have_content("#{field.titlecase} #{error_message}")
    end
  else
    if using_formtastic
      error_paragraph = element.find(:xpath, '../*[@class="inline-errors"][1]')
      assert error_paragraph.has_content?(error_message)
    else
      assert page.has_content?("#{field.titlecase} #{error_message}")
    end
  end
end

Then /^the "([^"]*)" field should have no error$/ do |field|
  element = find_field(field)
  classes = element.find(:xpath, '..')[:class].split(' ')
  if classes.respond_to? :should
    classes.should_not include('field_with_errors')
    classes.should_not include('error')
  else
    assert !classes.include?('field_with_errors')
    assert !classes.include?('error')
  end
end

Then /^the "([^"]*)" checkbox(?: within (.*))? should be checked$/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_true
    else
      assert field_checked
    end
  end
end

Then /^the "([^"]*)" checkbox(?: within (.*))? should not be checked$/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_false
    else
      assert !field_checked
    end
  end
end
 
Then /^(?:|I )should be on (.+)$/ do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

Then /^(?:|I )should have the following query string:$/ do |expected_pairs|
  query = URI.parse(current_url).query
  actual_params = query ? CGI.parse(query) : {}
  expected_params = {}
  expected_pairs.rows_hash.each_pair{|k,v| expected_params[k] = v.split(',')} 
  
  if actual_params.respond_to? :should
    actual_params.should == expected_params
  else
    assert_equal expected_params, actual_params
  end
end

Then /^show me the page$/ do
  save_and_open_page
end

When(/^I add the election called "([^"]*)"$/) do |election_name|
  raise "Error add" unless @driver.page_source.include? "Add Election"
  raise "Error org" unless @driver.page_source.include? "Organization:"
  raise "Error election" unless @driver.page_source.include? "New election name:"
  raise "Error livestream" unless @driver.page_source.include? "YT livestream (optional):"
  raise "Error submit" unless @driver.page_source.include? "submit"
  
  demo_div = driver.find_element(:id, 'electionmodal')

  puts demo_div.attribute('innerHTML')
  puts driver.execute_script("return arguments[0].innerHTML", demo_div)

  puts demo_div.attribute('textContent')
  puts driver.execute_script("return arguments[0].textContent", demo_div)
  
  org_element = @driver.find_element(:id => 'new_election_org')
  org_element.send_keys "org1"
  org_element.submit
  election_elem = @driver.find_element(:id => 'new_election_name')
  election_elem.send_keys "election1"
  election_elem.submit
  @driver.find_element(:id => 'submit').click
  wait = Selenium::WebDriver::Wait.new(timeout: 20)
  wait.until { @driver.page_source.include? "election1" }
  #raise "Error election add fail" unless @driver.page_source.include? "election1"
  
  #@driver.switch_to.window("hiddenFrame")
  #puts @driver.page_source
  # @driver.switch_to.frame "hiddenFrame"
  # puts @driver.page_source
  # raise "Error org2" unless @driver.page_source.include? "Organization:"
  
  # wait = Selenium::WebDriver::Wait.new(:timeout => 15)
  # form = wait.until {
  #   element = @driver.find_element(:name, "election_form")
  #   element if element.displayed?
  # }
  # puts "Test Passed: Form input found" if form.displayed?

  #main, popup = @driver.window_handles
  #@driver.switch_to.window( @driver.window_handles.last )
  #@driver.switch_to.frame("hiddenFrame")
  
  # @driver.execute_script("open_election_modal()")
  # a = @driver.switch_to.alert
  # wait.until ExpectedConditions.alertIsPresent
  # if a.text == 'Organization'
  #   a.dismiss
  # end
  
  #blah.send_keys "blah"
  # #@driver.find_element(:id => 'button_id').click
  # raise "Error add" unless @driver.page_source.include? "Add Election"
  # #org_element.send_keys "blah"
  

end

Given(/^I am logged in as an admin$/) do
  
  @driver = Selenium::WebDriver.for :firefox
  @driver.navigate.to "https://csua-169-lillianchou94.c9users.io"
  @driver.manage.timeouts.implicit_wait = 5

  raise "Error CSUA" unless @driver.page_source.include? "CSUA"
  @driver.find_element(:id => 'sign_in_id').click
  email_elem = @driver.find_element(:id => 'Email')
  email_elem.send_keys "email1111222@gmail.com"
  email_elem.submit
  password_elem = @driver.find_element(:id => 'Passwd')
  password_elem.send_keys "169email"
  password_elem.submit
  wait = Selenium::WebDriver::Wait.new(timeout: 3)
  wait.until { @driver.page_source.include? "CSUA" }
  raise "Error CSUA afterwards" unless @driver.page_source.include? "CSUA"
  raise "Error hello" unless @driver.page_source.include? "Hello, "
  raise "Error add" unless @driver.page_source.include? "Add Election"
  #@driver.quit
end

Then(/^I am logged in as an admin from the login page$/) do
  
  @driver = Selenium::WebDriver.for :firefox
  @driver.navigate.to "https://csua-169-lillianchou94.c9users.io/login"
  @driver.manage.timeouts.implicit_wait = 5

  raise "Error CSUA" unless @driver.page_source.include? "CSUA"
  @driver.find_element(:id => 'sign_in_id').click
  email_elem = @driver.find_element(:id => 'Email')
  email_elem.send_keys "email1111222@gmail.com"
  email_elem.submit
  password_elem = @driver.find_element(:id => 'Passwd')
  password_elem.send_keys "169email"
  password_elem.submit
  wait = Selenium::WebDriver::Wait.new(timeout: 5)
  wait.until { @driver.page_source.include? "CSUA" }
  raise "Error CSUA afterwards" unless @driver.page_source.include? "CSUA"
  raise "Error hello" unless @driver.page_source.include? "Hello, "
  raise "Error add" unless @driver.page_source.include? "Add Election"
  #@driver.quit
end

Then(/^I see "([^"]*)"$/) do |text|
  raise "Not found error" unless @driver.page_source.include? text
end

Then(/^I log out$/) do
  @driver.quit
end

Then(/^I should see an element with id "([^"]*)"$/) do |id|
  # c = page.find(id)   
  # assert page.has_xpath(c)
end

When (/^(?:|I ) press Delete election for "([^"]*)"$/) do |election_name|
end

When(/^I add the organization called "([^"]*)"$/) do |org_name|
    fail "Unimplemented" # Write code here that turns the phrase above into concrete actions
end

Then(/^(?:|I )should see a drop down menu to the right of "([^"]*)"$/) do |text|
    fail "Unimplemented" # Write code here that turns the phrase above into concrete actions
end

Then(/^(?:|I )should see "([^"]*)" in the drop down menu to the right of "([^"]*)"$/) do |text|
    fail "Unimplemented" # Write code here that turns the phrase above into concrete actions
end

Then(/^(?:|I )should not see "([^"]*)" in the drop down menu to the right of "([^"]*)"$/) do |text|
    fail "Unimplemented" # Write code here that turns the phrase above into concrete actions
end

Then(/^(?:|I )should see "([^"]*)" in the "([^"]*)" field$/) do |text|
    fail "Unimplemented" # Write code here that turns the phrase above into concrete actions
end